
#include <TaskScheduler.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>

#include "GestureHandler.h"
#include "SensorsManager.h"
#include "LEDsManager.h"

#define SAMPLING_PERIOD 5000


//const char* ssid     = "RED_TUTOELECTRO";
//const char* password = "tutoelectro123";

const char* ssid     = "FISIO_WF";
const char* password = "fisfosFUS";
const uint16_t port = 8266;

WiFiServer TCPServer(port);
WiFiClient TCPClient; 


bool clientConnected = false;

SensorsManager sensorManager = (true, false, true);
GestureHandler gestureHandler;
LEDsManager ledsManager;



void subString (const char* input, int offset, int len, char* dest);

void checkConnectionStatus();
void sampleSensors();
void checkForGestures();

Task task_ConnectionStatus(100, TASK_FOREVER, &checkConnectionStatus);
Task task_GestureHandler(10, TASK_FOREVER, &checkForGestures);
//Task task_LedsManager(100, TASK_FOREVER, &lm.funct);
Task task_SensorManager(SAMPLING_PERIOD, TASK_FOREVER, &sampleSensors);

Scheduler scheduler; 
  
void setup() 
{  
  Serial.begin(115200);

  sensorManager.init();
  //gestureHandler.init();
  ledsManager.init(30);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");  
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  TCPServer.begin();

  scheduler.addTask(task_ConnectionStatus);
  scheduler.addTask(task_GestureHandler);
  scheduler.addTask(task_SensorManager);

  task_ConnectionStatus.enable();
  //task_GestureHandler.enable();
  task_SensorManager.enable();

  ledsManager.setColor( 0xFF00FF);  
}

void loop() 
{

  scheduler.execute();

}

void checkConnectionStatus()
{

  if (!TCPClient.connected()) {
        // try to connect to a new client
        TCPClient = TCPServer.available();
        clientConnected = false;
  }    

  else 
  {
        clientConnected = true;  
        if (TCPClient.available() > 0)    //Check for new data
        { 
            String data = TCPClient.readStringUntil('\r'); 
            char packet[data.length()];  // Length of the string which includes +1 used with \r for \0 end of string char
            
            data.toCharArray(packet, data.length());
            packet[data.length()-1] ='\0';            
            decodeCommand(data,strlen(data));
        }
  }
  
}



void decodeCommand(char aPacket[], uint8_t aSize)
{
  
  char command[4] = subString(command,aPacket, 3);

  if (command.equals("GET"))
  {
    //To be implemented
  }
  else if ( command.equals ("SET"))
  {
    decodeSET(packet);  
  } 
}


void decodeSET (char aPacket[], uint8_t aSize)
{

  char command[4] = strcpy(command,aPacket, 3);
    
  
  
  if (command.equals("COL"))
  {
    uint32_t color = 
    ledsManager.setColor( 0xFF00FF); 
  }
  else if ( command.equals ("SET"))
  {
    decodeSET(command.substring(4);  
  } 
}

void sampleSensors()
{
  sensorManager.sampleSensors();

  if (TCPClient.connected())
  {
     String sensorsDataString = "SEN TEMP:" + String(sensorManager.getTemperature());
     sensorsDataString += " HUM:" + String (sensorManager.getHumidity());
     sensorsDataString += " eCO2:" + String (sensorManager.getECO2());
     sensorsDataString += " TVOC:" + String (sensorManager.getTVOC());
     TCPClient.write( sensorsDataString.c_str() );
  }
}

void checkForGestures()
{  
  gestureHandler.checkForGestures();
}

void subString (const char* input, int from, int to, char[] dest)
{
  int input_len = strlen (input);

  if (offset + len > input_len)
  {
     return NULL;
  }
  strncpy (dest, input + offset, len);
  return dest;
}



